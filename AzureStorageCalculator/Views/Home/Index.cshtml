@model AzureStorageCalculator.ViewModels.Home.Index
@{
    ViewBag.Title = "Home";
}

<div class="jumbotron">
    <h1>Azure Storage Calculator</h1>
    <p>Need to get an estimate on what how much it will cost to move to Azure Storage? Azure storage has a number of options. Read about different storage redundancy options <a href="https://azure.microsoft.com/en-us/documentation/articles/storage-redundancy/">here</a>, and temperature storage options <a href="https://azure.microsoft.com/en-us/blog/introducing-azure-cool-storage/">here</a>.</p>
    <p>Enter some simple assumptions below and press the calculate button to get your estimate today.</p>
    <p>NOTE: This tool assumes retail commercial pricing, you might want to consider an Enterprise Agreement for additional discounts, contact your Microsoft Sales Representative today.</p>
</div>

<h2>Tell us a bit about your use case:</h2>
@using (Html.BeginForm("Calculate", "Home", FormMethod.Post))
{
    <div class="form-group">
        <label for="StartingStorage">Starting TBs</label>
        <input type="number" class="form-control" id="StartingStorage" name="StartingStorage" placeholder="" step="0.01">
        <p class="help-block">i.e. '10' if you have 10 TBs of data to start with</p>
    </div>
    <div class="form-group">
        <label for="MonthlyGrowthStorage">New TBs (per month)</label>
        <input type="number" class="form-control" id="MonthlyGrowthStorage" name="MonthlyGrowthStorage" placeholder="" step="0.01">
        <p class="help-block">i.e. '1' for 1 TB new data per month</p>
    </div>
    <div class="form-group">
        <label for="PctStorageRetrieval">% of stored Retrieval Monthly</label>
        <input type="number" class="form-control" id="PctStorageRetrieval" name="PctStorageRetrieval" placeholder="" step="0.01">
        <p class="help-block">i.e. '.02' if you plan to download 2% each month</p>
    </div>
    <div class="form-group">
        <label for="MainTransactions"># of main transactions per month (per 10,000)</label>
        <input type="number" class="form-control" id="MainTransactions" name="MainTransactions" placeholder="">
        <p class="help-block">100 = 1 million transactions</p>
    </div>
    <div class="form-group">
        <label for="OtherTransactions"># of other transactions per month (per 10,000)</label>
        <input type="number" class="form-control" id="OtherTransactions" name="OtherTransactions" placeholder="">
        <p class="help-block">100 = 1 million transactions</p>
    </div>
    <div class="form-group">
        <label for="MonthsToProject"># of months to project</label>
        <input type="number" class="form-control" id="MonthsToProject" name="MonthsToProject" placeholder="">
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-default">Calculate</button>
    </div>
}

<h2>Estimate based on the following assumptions:</h2>
<h3>Retail Commercial At-Rest Prices</h3>
<table class="table-condensed table-bordered table-striped table-numbers">
    <thead>
        <tr>
            <th></th>
            @foreach (var redundancy in Model.AtRestPrices.GroupBy(x => x.StorageRedundancy).OrderBy(x => x.Key))
            {
                    <th colspan="2">@redundancy.Key.Humanize().Transform(To.TitleCase)</th>
            }
        </tr>
        <tr>
            <th></th>
            @foreach (var redundancy in Model.AtRestPrices.GroupBy(x => x.StorageRedundancy).OrderBy(x => x.Key))
            {
                foreach (var temperature in redundancy.GroupBy(x => x.StorageTemperature).OrderBy(x => x.Key))
                {
                    <th>@temperature.Key</th>
                }
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var size in Model.AtRestPrices.GroupBy(x => x.SizeCutoff).OrderBy(x => x.Key))
        {
            <tr>
                <th>Up To @((size.Key/1000).ToString("N0")) TB / Month</th>
                @foreach (var redundancy in size.GroupBy(x => x.StorageRedundancy).OrderBy(x => x.Key))
                {
                    foreach (var temperature in redundancy.GroupBy(x => x.StorageTemperature).OrderBy(x => x.Key))
                    {
                        <td>@temperature.First().Amount.ToString("N4")</td>
                    }
                }
            </tr>
        }
    </tbody>
</table>

<h3>Retail Commercial Transaction Prices</h3>
<table class="table-condensed table-bordered table-striped table-numbers">
    <thead>
        <tr>
            <th></th>
            @foreach (var redundancy in Model.OtherPrices.GroupBy(x => x.StorageRedundancy).OrderBy(x => x.Key))
            {
                <th colspan="2">@redundancy.Key.Humanize().Transform(To.TitleCase)</th>
            }
        </tr>
        <tr>
            <th></th>
            @foreach (var redundancy in Model.OtherPrices.GroupBy(x => x.StorageRedundancy).OrderBy(x => x.Key))
            {
                foreach (var temperature in redundancy.GroupBy(x => x.StorageTemperature).OrderBy(x => x.Key))
                {
                    <th>@temperature.Key</th>
                }
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.OtherPrices.GroupBy(x => x.PriceType).OrderBy(x => x.Key))
        {
            <tr>
                <th>@item.Key.Humanize()</th>
                @foreach (var redundancy in item.GroupBy(x => x.StorageRedundancy).OrderBy(x => x.Key))
                {
                    foreach (var temperature in redundancy.GroupBy(x => x.StorageTemperature).OrderBy(x => x.Key))
                    {
                        <td>@temperature.First().Amount.ToString("N4")</td>
                    }
                }
            </tr>
        }
    </tbody>
</table>
